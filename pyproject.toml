[build-system]
requires = [
    "hatchling>=1.21.0"
]
build-backend = "hatchling.build"

[project]
name = "shuup-template"
version = "1.0.0"
description = "Shuup E-Commerce Template Project"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
license = "OSL-3.0"
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: Django",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]
dependencies = [
    "shuup>=3.2.0",
    "django>=4.2,<5.1",
    "django-environ",
    "dj-database-url",
    "requests",
    "python-dateutil", 
    "pytz",
    "pillow",
]

[project.optional-dependencies]
postgresql = ["psycopg2-binary"]
mysql = ["mysqlclient"]
oracle = ["oracledb"]
redis = ["redis"]
memcached = ["pymemcache"]
production = ["gunicorn", "whitenoise"]
monitoring = ["sentry-sdk"]

[project.urls]
Homepage = "https://shuup.com/"
Repository = "https://github.com/shuup/shuup"
Documentation = "https://shuup.readthedocs.io/"

[tool.black]
exclude = '''
/(
    migrations/.*
    | .eggs
    | .git
    | .tox
    | .venv
    | venv
    | _build
    | buck-out
    | build
    | dist
)/
'''
line_length = 120
target-version = ["py39", "py310", "py311", "py312"]

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
combine_as_imports = true
known_django = "django"
known_first_party = "shuup"
sections = ["FUTURE", "STDLIB", "DJANGO", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
skip_glob = ["*/migrations/*", "*/venv/*", "*/.venv/*", "*/node_modules/*", "*/.tox/*", "*/.git/*"]

[tool.flake8]
max-line-length = 120
ignore = ["E203", "W503", "E501"]
exclude = [
    "migrations",
    "venv",
    ".venv",
    ".git",
    ".tox",
    "dist",
    "doc",
    "*.egg",
    "build",
    "node_modules",
]

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "project.settings"
django_find_project = false
addopts = [
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
]
testpaths = ["tests"]
norecursedirs = ["bower_components", "node_modules", ".git", "venv", ".venv", ".tox", "dist", "build"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["."]
branch = true
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/test_*.py",
    "*/.venv/*",
    "*/venv/*",
    "*/.tox/*",
    "*/node_modules/*",
    "*/__pycache__/*",
    "setup.py",
    "manage.py",
    "*/settings/*",
    "*/wsgi.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.ruff]
line-length = 120
target-version = "py39"
exclude = [
    "migrations",
    "venv",
    ".venv",
    ".git",
    ".tox",
    "dist",
    "doc",
    "*.egg",
    "build",
    "__pycache__",
    "node_modules",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "E203",  # whitespace before ':'
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"migrations/*.py" = ["E501", "F401"]

[dependency-groups]
dev = [
    # Development tools
    "black>=24.0.0",
    "isort>=5.13.0",
    "flake8>=7.0.0",
    "ruff>=0.12.1",
    # Testing tools
    "pytest>=8.0.0",
    "pytest-django>=4.8.0",
    "pytest-cov>=4.0.0",
    "coverage>=7.4.0",
    # Additional development tools
    "pre-commit>=3.6.0",
    "build>=1.0.0",
    "twine>=4.0.0",
    # Type checking
    "mypy>=1.16.1",
    "django-stubs>=5.1.3",
    "types-pytz>=2025.2.0.20250516",
    "types-python-dateutil>=2.9.0.20250516",
]

test = [
    "pytest>=8.0.0",
    "pytest-django>=4.8.0",
    "pytest-cov>=4.0.0",
    "coverage>=7.4.0",
]

# Hatchling build configuration
[tool.hatch.build]
exclude = [
    "tests",
    "tests/**",
    ".git",
    ".tox",
    "venv",
    ".venv",
    "node_modules",
    "*.pyc",
    "*.pyo",
    "__pycache__",
    ".pytest_cache",
    "*.egg-info",
    "build",
    "dist",
]

[tool.hatch.build.targets.wheel]
packages = ["business_logic", "project"]

[tool.hatch.build.targets.sdist]
include = [
    "business_logic",
    "project",
    "README.md",
    "pyproject.toml",
    "manage.py",
    "requirements*.txt",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.mypy]
python_version = "3.9"
ignore_missing_imports = true
warn_return_any = false
warn_unused_configs = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
show_error_codes = true
show_column_numbers = false
pretty = true

exclude = [
    "migrations",
    "tests",
    "venv",
    ".venv",
    ".git",
    ".tox", 
    "dist",
    "doc",
    "build",
    "__pycache__",
    "node_modules",
    "manage.py",
]